(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{"./src/markdown/FrontEnd/1. Start Vue.js By Visual Stduio Code.md":function(n,i,p){n.exports='<h1 id="start-vuejs-by-visual-stduio-code">Start Vue.js By Visual Stduio Code</h1>\n<h1 id="1-필수-요소-설치">1. 필수 요소 설치</h1>\n<h3 id="11-visual-studio-code-설치">1.1 Visual Studio Code 설치</h3>\n<p><a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a></p>\n<h3 id="12-npm설치-long-term-support-버전-권장">1.2 NPM설치, Long Term Support 버전 권장.</h3>\n<p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>\n<h3 id="13-git-설치언급은-안되고-필수는-아니지만-ㅎㅎ">1.3. git 설치(언급은 안되고 필수는 아니지만 ㅎㅎ)</h3>\n<p><a href="https://git-scm.com/">https://git-scm.com/</a></p>\n<h1 id="2-visual-studio-code-setting">2. Visual Studio Code Setting</h1>\n<h3 id="21-visual-studio-code-열기">2.1 Visual Studio Code 열기</h3>\n<img src=\''+p("./src/markdown/FrontEnd/img/1/vscode-main.png")+"' width='600'/>\n\n\n<h3 id=\"22-마켓에서-필요한-리소스-각자-다운받기\">2.2 마켓에서 필요한 리소스 각자 다운받기.</h3>\n<p>참고하기 좋은 자료\n--&gt;&gt; <a href=\"https://www.shopify.com/partners/blog/best-visual-studio-code-extensions-2017\">https://www.shopify.com/partners/blog/best-visual-studio-code-extensions-2017</a></p>\n<img src='"+p("./src/markdown/FrontEnd/img/1/vscode-market.png")+"' width='600'/>\n\n<h1 id=\"3-npm에서-vuejs-에-필요한-기본-적인-요소-설치하기\">3. NPM에서 Vue.js 에 필요한 기본 적인 요소 설치하기.</h1>\n<h3 id=\"31-npm-설치-되어있는지-확인하기\">3.1 NPM 설치 되어있는지 확인하기.</h3>\n<blockquote>\n<p><strong>정상적으로 설치되어있는지 알아보기위해 명령 프롬포트에서(CMD) npm --version</strong>\n<img src='"+p("./src/markdown/FrontEnd/img/1/npmversion.png")+"'/></p>\n</blockquote>\n<blockquote>\n<p><strong>npm 에서 글로벌로 설치할만한 모듈들을 설치하자.</strong></p>\n</blockquote>\n<img src='"+p("./src/markdown/FrontEnd/img/1/npminstallvue.png")+'\'/>\n- webpack\n    - 명령어 : **npm install webpack -g**\n    - Code Splitting, Hot Reloading, Long Term Caching 등등\n\n\n<ul>\n<li><p>Vue</p>\n<ul>\n<li>명령어 : <strong>npm install vue -g</strong></li>\n<li>대규모 빌드 권장방식 및 WebPack을 사용 하기위함(NPM)</li>\n</ul>\n</li>\n<li><p>vue-cli</p>\n<ul>\n<li>명령어 : <strong>npm install <a href="mailto:vue-cli@2.9.3">vue-cli@2.9.3</a> -g</strong></li>\n<li>2.9.3은 개인적인 사내 권장 템플릿 버전</li>\n<li><a href="https://cli.vuejs.org/guide/creating-a-project.html#using-the-gui">https://cli.vuejs.org/guide/creating-a-project.html#using-the-gui</a></li>\n</ul>\n</li>\n<li><p>만약, 아래 인스톨 과정 및 네트워크 동작 작업시에 회사의 사내 네트워크 문제로 막혀있을때는..</p>\n</li>\n<li><p>명령어 : <strong>npm config set strict-ssl false</strong></p>\n</li>\n<li><p>혹은</p>\n</li>\n<li><p>명령어 : <strong>set npm_config_strict_ssl=false</strong></p>\n</li>\n</ul>\n<h3 id="32-설치된-npm-글로벌-리스트-확인해보기">3.2 설치된 NPM 글로벌 리스트 확인해보기.</h3>\n<p><strong>npm list -g --depth=0</strong></p>\n<img src=\''+p("./src/markdown/FrontEnd/img/1/npmlist-g.png")+'\'/>\n\n\n<h1 id="4-vue-기본-템플릿을-설치-및-open-it">4. Vue 기본 템플릿을 설치 및 Open It</h1>\n<h3 id="41-원하는-경로에-vue-cli-로-템플릿-설치">4.1 원하는 경로에 Vue-cli 로 템플릿 설치.</h3>\n<pre><code>- 명령 커맨드창에서 원하는 경로로 이동</code></pre><p><strong>vue init webpack-simple {지정이름}</strong></p>\n<img src=\''+p("./src/markdown/FrontEnd/img/1/vuecliinstall.png")+"'/>\n\n<h3 id=\"42-원하는-경로에-정상적으로-설치되었는지-확인\">4.2 원하는 경로에 정상적으로 설치되었는지 확인</h3>\n<img src='"+p("./src/markdown/FrontEnd/img/1/webpacksimpletemplate.png")+"'/>\n\n<h3 id=\"43-visual-studio-code-로-생성된-프로젝트-열기\">4.3 Visual Studio Code 로 생성된 프로젝트 열기</h3>\n<img src='"+p("./src/markdown/FrontEnd/img/1/openproject.png")+"' width='600'/>\n\n<h3 id=\"43-visual-studio-code-에서-해당-프로젝트의-node_module-다운로드\">4.3 Visual Studio Code 에서 해당 프로젝트의 Node_Module 다운로드</h3>\n<ul>\n<li>4.3.1 단축키 : ctrl + &#39;  (터미널열기)</li>\n<li>4.3.2 명령어 : <strong>npm install</strong> (해당 프로젝트 경로로 설정되어있는지 확인 후 진행)</li>\n<li>npm 에서 해당 샘플 프로젝트 내 package.json 속, 필요한 모듈들을 다운로드 한다.<ul>\n<li>Package.json 을 통한 모듈 다운로드는 Java 의 Maven / .Net 의 Nuget 혹은 config 속 필요 dll 다운로드와 비슷한 개념.</li>\n</ul>\n</li>\n</ul>\n<img src='"+p("./src/markdown/FrontEnd/img/1/npminstallcomplete.png")+"' width='600'/>\n\n\n<h3 id=\"44-hello-world-실행-해보기\">4.4 Hello World 실행 해보기.</h3>\n<ul>\n<li><p>4.4.1 단축키 : ctrl + &#39;  (터미널열기)</p>\n</li>\n<li><p>4.4.2 명령어 : <strong>npm run dev</strong></p>\n</li>\n<li><p>npm 에서 필요한 설정된 webpack 및  package.json 설정 정보를 기준으로, node.js 서버를 구동시켜 localhost 상에 화면을 띄우게된다.</p>\n</li>\n<li><p>4.4.3 실행</p>\n<ul>\n<li>실행 과정<ul>\n<li><img src='"+p("./src/markdown/FrontEnd/img/1/npmrundev.png")+"' width='600'/></li>\n</ul>\n</li>\n<li>실행된 화면<ul>\n<li><img src='"+p("./src/markdown/FrontEnd/img/1/helloworld.png")+"' width='600'/>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},"./src/markdown/FrontEnd/img/1/helloworld.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/helloworld.png"},"./src/markdown/FrontEnd/img/1/npminstallcomplete.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/npminstallcomplete.png"},"./src/markdown/FrontEnd/img/1/npminstallvue.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/npminstallvue.png"},"./src/markdown/FrontEnd/img/1/npmlist-g.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/npmlist-g.png"},"./src/markdown/FrontEnd/img/1/npmrundev.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/npmrundev.png"},"./src/markdown/FrontEnd/img/1/npmversion.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/npmversion.png"},"./src/markdown/FrontEnd/img/1/openproject.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/openproject.png"},"./src/markdown/FrontEnd/img/1/vscode-main.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/vscode-main.png"},"./src/markdown/FrontEnd/img/1/vscode-market.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/vscode-market.png"},"./src/markdown/FrontEnd/img/1/vuecliinstall.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/vuecliinstall.png"},"./src/markdown/FrontEnd/img/1/webpacksimpletemplate.png":function(n,i,p){n.exports=p.p+"img/_/_/src/markdown/FrontEnd/img/1/webpacksimpletemplate.png"},"./src/markdown/FrontEnd/개인적으로 많이 쓰는 javascript 개념.md":function(n,i){n.exports='<h2 id="개인적으로-많이-쓰는-자바스크립트-개념">개인적으로 많이 쓰는 자바스크립트 개념</h2>\n<h3 id="변수">변수</h3>\n<code>\nvar 변수명 = 값\n</code>\n\n\n<h3 id="함수">함수</h3>\n<code>\nfunction(매개변수1, 매개변수2){\n    return 매개변수1+매개변수2;\n}\n</code>\n\n'},"./src/markdown/FrontEnd/내멋대로 Vue.js 정리.md":function(n,i){n.exports='<h2 id="내멋대로-vuejs-정리하기">내멋대로 vue.js 정리하기</h2>\n<h3 id="1-component-내에서-자주쓰이는-부분들">1. Component 내에서 자주쓰이는 부분들...</h3>\n<h3 id="vue">.Vue</h3>\n<p>.vue 파일의 기본 구조는 template 태그 영역과 Script 태그 영역으로 이루어진다.</p>\n<p>template</p>\n<pre><code>//여기에는 vue 컴포넌트의 View에 해당하는 HTML DOM구조</code></pre><p>/template</p>\n<p>script</p>\n<pre><code>//여기에는 vue 컴포넌트에 대한 정의</code></pre><p>/script</p>\n<h3 id="vue-component-의-script-에-정의되는">Vue Component 의 Script 에 정의되는..</h3>\n<p>많이 쓰는 순으로 일단 한번 써보자</p>\n<p>data</p>\n<code>\n    data(){\n        return {\n            sampleData : \'샘플데이터\';\n        }\n    }\n</code>\n\n\n\n<p>Vue Component의 ViewModel 에 해당한다.(MVVM의 &#39;VM&#39;)</p>\n<p>해당 컴포넌트에서 사용되는 고유 데이터를 위한 선언영역</p>\n<pre><code>Component 내 스크립트에서 불러올때는 보통 \n\nthis.$data.sampleData\n\ntemplate 에서 사용할때는 \n\n{{sampleData}}</code></pre>'},"./src/markdown/FrontEnd/프론트개발 용어 정리 #1.md":function(n,i){n.exports='<h2 id="프론트개발과-백엔드개발의-차이점">프론트개발과 백엔드개발의 차이점</h2>\n<h3 id="-역할-분리의-필요성의-시작">+ 역할 분리의 필요성의 시작</h3>\n<p>(중요) 어디까지나 개인적인 의견</p>\n<p>먼저, 이전에는 백엔드/프론트라는 뜻이 관리자(어드민)페이지를 백엔드로 많이 보고, 클라이언트(고객)가 보는 페이지를 프론트라고 많이 지칭 하였으나\n현재는 API와 같은 서버사이드 개발이 백엔드로 많이 불리고, 자바스크립트를 활용한 브라우저에서 처리되는 개발을 프론트개발로 많이 나뉘고 있는듯 하다.</p>\n<p>프론트개발과 백엔드 개발이 분리되고 있는 현 추세를 추측해본다.</p>\n<pre><code>- 웹 서비스의 고도화, 모바일 개발의 중요성 증가\n- 자바스크립트 표준을 되도록 지키는 브라우저(대표적으로 크롬)가 점점 늘어나는 추세\n- MSA 구조의 개발이 많아지면서, 자연스러운 API 중심적 개발이 곧 프론트개발의 기반을 만들어 줄수있었다.\n- 웹 브라우저를 구동하는 PC 및 모바일 기기의 성능 향상으로, 자바스크립트에서 처리할 수 있는 구동 능력이 증가했다.\n- NPM/NODE 환경이 보편화 되고, 많은 기술 개발로 인한 프론트 개발이 용이해지고, javascript framework가 많아졌다.\n- SPA(Single Page Application) 패턴의 웹 개발의 유행\n- javascript의 표준화가 지속적으로 이루어짐(2000년대에 비해)</code></pre><h3 id="그래서-어디까지가-보통-프론트-백엔드인건가">그래서 어디까지가 보통 프론트, 백엔드인건가</h3>\n<p>보통의 경우 다음과 같이 생각된다.</p>\n<p>백엔드 개발자(일부 DBA업무와 겹칠 수 있으나, 내 업무 기준)</p>\n<ul>\n<li>DB 테이블 및 구조 설계, 비즈니스 데이터 구조 설계 등</li>\n<li>쿼리 설계 및 구현 (프로시저, 함수를 포함한)</li>\n<li>java/.Net/php 등 웹 서버에서 구동함에 있어 사용되는 웹 서버 어플리케이션 기반 개발, API개발</li>\n</ul>\n<p>프론트 개발자</p>\n<ul>\n<li>javascript를 사용하여, 브라우저에서 해석하는, 클라이언트에서 동작하는 웹 어플리케이션 개발 및 데이터 구조 설계</li>\n<li>(현업기준으로) java/.net/php 등 웹 서버 구동함에 있어 사용되는 웹 서버 어플리케이션 기반 개발, 페이지에 필요한 서버렌더링 및 페이지 개발</li>\n<li>자바스크립트 및 자바스크립트 데이터구조가 곧 웹 어플리케이션의 성능을 좌우하는 경우가 많아짐으로써 업무의 고도화</li>\n</ul>\n<p>UI개발자( 회사에 따라 프론트개발자가 해당 역할을 처리할 가능성이 있음)</p>\n<ul>\n<li>UI/UX에 해당하는 영역에 대한 화면의 CSS 개발(기존 퍼블리셔 업무)</li>\n<li>CSS개발의 효율성, 구조 고도화 및 효율성 증가를 위한 연구를 통한 sass와 같은 전처리기, CSS빌드와 같은 형태가 이루어지면서 UI 또한 개발 고도화의 과정이 진행됨, 기술의 고도화 및 업무의 중요성이 이를 포함한 여러 이유로 그만큼 증가</li>\n</ul>\n<h3 id="server-side-render-ssr">Server Side Render (SSR)</h3>\n<p>서버사이드렌더란, 웹 서버 어플리케이션에서 처리한 데이터 혹은 기능을 통하여 웹 페이지에 내려오는 DOM을 &#39;서버&#39;에서 만드는 일련의 행위이다.\n클라이언트 개발이 중요하기 이전에는, 이러한 방식으로 많은 개발이 이루어짐.\n고객이 웹 서버에 특정 페이지를 &#39;요청(request)&#39; 하면, 웹 서버가 서버사이드렌더를 통해 필요한 정보를 페이지(HTML DOCUMENT)로 처리하여 &#39;응답(response)&#39; 하는 것.</p>\n<h3 id="client-side-render-csr">Client Side Render (CSR)</h3>\n<p>클라이언트 사이드 렌더란, 브라우저에서 해석 가능한 자바스크립트와 같은 인터프리터 언어, 스크립트 언어로 DOM을 재구성하거나 그리는 일련의 과정이다.\n사용자의 행동, 요청에 따라 서버에 웹 페이지 자체를 재요청 하지 않은 상태에서 이루어지는 일련의 변화를 준다.\n쉽게, 페이지를 이동하는데 페이지가 전체적으로 깜빡이며 웹페이지 전체가 새로 네트워크에 리로드 되지않은상태에서 변화가 이러난다면, CSR이라고 보는게 일반적이다.\nCSR의 개념이 커지고, 자바스크립트의 기능이 훌륭해지며 Single Page Application 개발이 가능해졌다고 생각한다.</p>\n<h3 id="single-page-application">Single Page Application</h3>\n<p>말 그대로 하나의 페이지에서 실행되는 어플리케이션.\nCSR로만 이루어지는 행위로, 사용자의 입장에서는 여러 페이지의 이동처럼 보이게 만들거나, 클라이언트에게 많은 기능 및 정보를 제공할 수 있도록 프로그래밍하여 개발한 하나의 웹 페이지의 어플리케이션 형태를 뜻한다.\n하나의 개발 패턴, 웹 페이지 설계, 디자인 패턴인셈.</p>\n<h3 id="ecma-script">ECMA Script</h3>\n<p>javascript 는 인터프리터언어 중 하나인 스크립트 언어의 표준이 아니다.\njavascript가 대표적이고 제일 잘 지키고 있으나, ECMA Script라는 스크립트 언어의 표준이 있으며, 현재는 ES5가 보편적이나, 보통의 모바일 브라우저 및 크롬 브라우저의 경우 ES6까지 지원한다.</p>\n<h3 id="npm">NPM</h3>\n<p>npm은 node package manager의 약자\n노드 서버 및 javascript library, framework의 저장소 역할을 하고있으며, 오픈소스 기반의 많은 소스들이 업로드, 다운로드 되고있음.</p>\n<p>이를 통한 자바스크립트 생태계의 많은 발전, 개발 고도화가 가능해짐</p>\n<h3 id="nodejs">node.js</h3>\n<p>javascript 를 구동하는데 사용되는 많은 자바스크립트 엔진 중\n구글의 v8 자바스크립트 엔진의 높은 성능을 발판으로 하나의 플랫폼이 탄생</p>\n<p>자바스크립트언어로 서버사이드 스크립트 언어를 구현함.\n기존의 .net/php/java와 같은 서버 사이드, 웹서버의 I/O 구현이 가능</p>\n<h3 id="library">library</h3>\n<p>라이브러리가 자바스크립트 쪽에만 국한되진 않지만 중요한 개념이므로 짚고 넘어간다.\n라이브러리란 흔히 개발에 사용되는 많은 재사용 가능한 도구들을 묶어놓은 집합체라고 보면된다.\n예를들어 여러개의 숫자를 한번에 더하기, 뺴기, 나누기, 곱셈, 제곱 과같은 계산 수행을 하는 기능(함수)를 만들고 그것을 묶으면 라이브러리가 되는셈</p>\n<h3 id="framework">framework</h3>\n<p>프레임워크란 라이브러리를 포함하여 특정 개념 혹은 어플리케이션 수행에 필요한 여러 묶음(library)들과 그에 필요한 변수 혹은 클래스와 같은 것들을 어플리케이션의 기본 구조, 개발 디자인의 패턴의 모음이라고 보면 된다. 따라서 라이브러리와의 큰 차이점으로는 개발 설계와 관련된 기본 틀의 묶음이기도 하다.</p>\n<h3 id="대표적인-javascript-library">대표적인 javascript library</h3>\n<p>jQuery 가 아주 대표적인 예,\n제이쿼리는 자바스크립트로 HTML document(DOM)을 접근을 조금 더 용이하게 할 수 있도록 도와주는 것이 대표적인 기능이다.\n접근한 DOM의 속성을 제어하는 용도로 많이 사용되었으며 현재는 사용 추세를 많이 줄이고 있으나, 아직까지 충분히 활용성 있고 직관적인 대표적인 자바스크립트 라이브러리다. 하지만 돔 접근 자체가 많은 클라이언트 성능을 소모한다.</p>\n<h3 id="대표적인-javascript-framework">대표적인 javascript Framework</h3>\n<p>Angular2, vue, react가 존재한다.\n자세한 설명은 추후에</p>\n<h3 id="형상관리">형상관리</h3>\n<p>형상관리란 개발이력과 더불어 소스, 산출물에 대한 백업 및 형상을 관리하기위함이 주 목적이다. 변경에 대한 이력을 체계적으로 관리할 수 있어 소프트웨어 자체의 품질 향상에 큰 기여가 된다.\n기존에는 파일단위의 SVN이 유행했지만, 논리적이고 소스단위의 git이 요즘 추세이다.\n개인적으로 git을 CUI로 다루는건 잘 못해서, sourceTree나 gitKraken을 사용하고있음.</p>\n<h3 id="ci---continuous-integration-지속적-통합-자동화">CI - Continuous Integration 지속적 통합, 자동화</h3>\n<p>CI는 개발자에게 있어 불필요한 소모적 업무를 줄여주는 큰 역할을 한다.\n예를들어 배포나 소스의 빌드 과정 등을 자동화하는 과정들이 있다. 자주 쓰이는 CI로는 Jenkins\nex) git으로 형상관리 -&gt; 개발자의 git의 신규 커밋(이력) 및 푸시 -&gt; 젠킨스가 연결된 git의 신규 커밋(이력) 및 푸시를 캐치 -&gt; git기준으로 젠킨스가 빌드 및 서버에 자동 배포</p>\n'},"./src/markdown/FrontEnd/프론트개발 일기 #1.md":function(n,i){n.exports='<h1 id="프론트엔드-개발자를-경험하고서-쓰는글">프론트엔드 개발자를 경험하고서 쓰는글</h1>\n<p>지금 이 글을 쓰는 시점에서 닷넷/자바/제이쿼리만 해오던 내가, 바닐라JS와 프론트엔드 프레임워크와 라이브러리를 마주하게 되면서 사내 프로젝트에서 정식으로, 현업에서 많은 시간을 투자해서 개발을 하게되고 공부하고 진행하게 되었다.</p>\n<h2 id="첫번째-프로젝트-angular2"><strong>첫번째 프로젝트, Angular2</strong></h2>\n<p>당시 AngularJS에서 Angular2로 전환된지 얼마 안된 상황이었고. 아무리 그래도 Javascript 라는 생각에 시작한 이 프로젝트에서 너무 나태한 내 자신을 볼수있는 좋은 기회였다.\nAngular2를 도입하고 개발하는데 필요한 과정에서 여러가지 문제점에 도달해서 프로젝트를 통으로 변경했다(...) \n결국엔 프론트는 제이쿼리와 서버렌더로 진행되게 되었다.</p>\n<p>당시 우리회사에서는 백엔드와 프론트엔드의 경계점이 없었고 애초에 프론트엔드라는 개념보단 페이지 바이 페이지로 개발자가 담당 개발이 되었다.</p>\n<p>이 프로젝트에서 야기된 문제점은 크게 세가지였다.</p>\n<ol>\n<li>Angular2는 러닝커브가 약간 있어서 개발자 간 인수인계 및 유지보수가 어려울 것이다.</li>\n<li>npm 환경에 대한 방화벽 오픈 필요</li>\n<li>node/npm에 대한 부담감</li>\n</ol>\n<p>이로 인해, 당시 사이드만 남고 다 만들었던 프로젝트를 엎고 ㅜ 제이쿼리로 다시 만들게 되었다.</p>\n<p>이때부터 나는 npm/node 환경에 대해 생각을 달리 가졌다.\n이때 ECMA Script를 처음 알았다.</p>\n<p>생각보다 어렵고 복잡하고, 셋팅 구조도 아주 단순해보이진 않았었다.\n또, DEV환경과 PROD 환경 간 차이점과 그가 왜 필요한지, 프론트와 백엔드의 개념이 확실히 없었을땐 너무 큰 혼란이었다.</p>\n<h2 id="두번째-프로젝트-vuejs-cdn"><em>두번째 프로젝트, Vue.js cdn</em></h2>\n<p>프론트에 대한 궁금증에 포기하기가 싫었다.\n물론 당시 서버개발, 백엔드 개발에 대해서 불만은 없었지만 프론트 프로젝트에서 더 빠른 성능을 낼 수 있다는 도큐먼트의 내용이 너무 궁금했다.\njQuery로 어렵게 구현한 SPA가 Angular2에서는 나름 간단한 구조로, 애초에 염두에 두고 만들어진 환경이라는 것에서 나오는 서버랜더의 부재, 빠른 반응속도는 분명 앞으로 더 큰 시장이 될것 같았다.(이런 판단을 비트코인으로 했었으면 좋았을턴데)</p>\n<p>아무튼, 포기하기 싫었고 신규 프로젝트에는 꼭 도입하고 싶었다.\n기존 문제점에 대한 지적에 대해서 고민 끝에 vue.js 를 선택했다.\n당시 react와 vue.js 모두 고려하고있엇으나 react를 선택하지 못한 이유가 있엇다.</p>\n<ol>\n<li>당시 우리회사는 Visual studio 2013을 사용하고 있어서 타입스크립트를 지원하기 위해선 따로 호환 설치가 더 필요했다.</li>\n<li>타입스크립트를 써야하는점은 곧 러닝커브, 인수인계의 이슈</li>\n<li>vue.js 가 cdn을 지원하며, 러닝커브가 낮고 적용하기 쉬움</li>\n</ol>\n<h3 id="net-mvc-with-vuejscdn">.Net mvc with Vue.js(CDN)</h3>\n<p>프로젝트는 총 페이지 수로 따지면 다섯페이지 정도 되는 적은 페이지였다.\n하지만 SPA구조로 갔을떄 이점이 많은 페이지였고 해당 페이지들 끼리 이동이 많아질 수 있는 구조여서, 적당한 프로젝트였다고 판단했다.\nvue.js가 CDN을 지원했고, 사수 과장님, 대리님의 적극적인 추천과 밀어주신 부분 덕분에 진행할 수 있게 되었다.</p>\n<p>...내용 추가필요</p>\n<h2 id="세번째-프로젝트-vuejs-with-webpack"><em>세번째 프로젝트, vue.js with webpack</em></h2>\n<p>근무하는 회사에서도 점점 SPA 페이지가 많아지는 상황에서, 그저 자바스크립트나 jquery 등으로 DOM을 핸들링 하는데는 한계가 많았고 무엇보다 SPA 페이지 구조를 만드는데 어려움이 많았다. DOM에 접근하고 DOM을 직접 만들어 랜더 하는 형태는 많은 리소스를 잡아 먹고, 복잡해질수록 데이터 바인딩 자체도 더 많은 DOM에 접근해야한다는 것을 의미했다. 물론 History Push State 로 SPA 페이지를 개발한다는것도 나에게 그렇게 매력적으로 느껴지지 않았던 것도 불만이였따.</p>\n<p>이러한 이슈 때문에 개인적인 의견으로서, 많은 개발자들도 비슷한 생각을 했는지 react나 vue, angular와 같은 framework가 탄생하고, 더 많은 성능이슈와 구조설계, 프론트엔드 개발 환경 개선을 위한 연구가 있었다고 생각한다. 앞서 말했지만 다들 모두 같은 고민을 했고, 그 결과로 생겨난 이런 자바스크립트 프레임워크는 나에게 큰 갈증해결과 동시에 새로운 개발환경을 제공해주었다.</p>\n<p>이번 프로젝트에서는 꽤 대규모의 vue.js 프로젝트가 되었다.\nVisual Studio Code 환경에서 실무 개발이 진행이 되고, NPM/node.js를 활용하여 개발 환경을 띄워 프론트엔드 전용 프로젝트를 개발 및 진행하게 되었다.\nWebpack + vue.js 를 기본 큰틀로 가져가서 개발 환경을 구성하였고, 이는 빌드환경과 개발환경을 완벽하게 분리하고 더 효율적인 산출물을 만들 수 있도록 도움을 많이 주었다고 생각한다.</p>\n<p>Vue에 대한 활용도와 전문성도 늘어났다. Vuex/vue-router는 기본이고, 기본적인 웹팩 활용과 더불어 번들링, 빌드 배포환경에 대한 셋팅을 어쩌다보니 직접 하게되었고, 그 결과 개인적으로 만족할만큼 큰 성장을 했다고 생각한다.</p>\n<p>PC/Mobile 모두 Vue.js 프로젝트로 진행되었으며, 매력적이었지만 우리나라 특성상 아직 PC까지 vue.js 와 ES6를 사용하는 것은 오히려 많은 스트레스를 준게 아닌가 싶다. 폴리필과 더불어 IE 지원을 위한 씨름하는 모습은... 상상만 해도 휴..</p>\n<p>이어서 작성 중..</p>\n'}}]);